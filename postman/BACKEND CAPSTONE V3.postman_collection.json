{
	"info": {
		"_postman_id": "7d1d4c37-aa79-45b1-92da-e4cd3efd3f74",
		"name": "BACKEND CAPSTONE V3",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "13708013"
	},
	"item": [
		{
			"name": "Auth",
			"item": [
				{
					"name": "Register",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('status code should be 201', () => {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test('response header Content-Type should be application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test('response body should be an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseJson).to.haveOwnProperty('error');\r",
									"    pm.expect(responseJson).to.haveOwnProperty('message');\r",
									"    pm.expect(responseJson).to.haveOwnProperty('user');\r",
									"\r",
									"    pm.expect(responseJson.error).to.be.false;\r",
									"    pm.expect(responseJson.message).to.equals('User created successfully');\r",
									"    pm.expect(responseJson.user).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body user should contain userId', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    const { user } = responseJson;\r",
									"\r",
									"    pm.expect(user).to.haveOwnProperty('_id');\r",
									"    pm.expect(user._id).to.not.equals('');\r",
									"\r",
									"    pm.environment.set('email', user.email);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJSUzI1NiIsImtpZCI6IjY5N2Q3ZmI1ZGNkZThjZDA0OGQzYzkxNThiNjIwYjY5MTA1MjJiNGQiLCJ0eXAiOiJKV1QifQ.eyJpc3MiOiJodHRwczovL3NlY3VyZXRva2VuLmdvb2dsZS5jb20vc21hcnQtaG9tZS0yYWFjMyIsImF1ZCI6InNtYXJ0LWhvbWUtMmFhYzMiLCJhdXRoX3RpbWUiOjE2NTI3MTQ4MTUsInVzZXJfaWQiOiJJUnR6dlZQVlhWYTYwZms3YzBlQXpBSXhxcnYyIiwic3ViIjoiSVJ0enZWUFZYVmE2MGZrN2MwZUF6QUl4cXJ2MiIsImlhdCI6MTY1MjcxNDgxNSwiZXhwIjoxNjUyNzE4NDE1LCJlbWFpbCI6ImNvbnRvaEBnbWFpbC5jb20iLCJlbWFpbF92ZXJpZmllZCI6ZmFsc2UsImZpcmViYXNlIjp7ImlkZW50aXRpZXMiOnsiZW1haWwiOlsiY29udG9oQGdtYWlsLmNvbSJdfSwic2lnbl9pbl9wcm92aWRlciI6InBhc3N3b3JkIn19.UPCYOxGjkGi_VVJZWVqDNnHcOg4nXZ84mUYPOMKYm7J2-oHb9BdFfiotTr3kJKqNUskC-3lfkZJlL34xSWwBVOl8XXG9uoTWZPoQdQqaQiTsAz6SMJfhNegZWKrtipnDzErN8nWvzMPNJjVKIwZTdWdB4WlIpQqf-9J1w8okQqOlUUMZARZHvwEfvPI8sw6mh9NugppNvicto7KMM05oWoob5Sk6oBIEQLHSX2EnY3iks6iOtbOgQ36YXv4Ag1zkLlbA2MAD9ZzTHbJljO1Ir89ezgwpERMfCV0E8ehSz8m362M1UqHvopagJojZogjjVC0ivW54Qk_ItLo2be0T5A",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"example\",\r\n    \"lastName\": \"example\",\r\n    \"email\": \"example@email.com\",\r\n    \"password\": \"example$123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/register",
							"host": [
								"{{host}}"
							],
							"path": [
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('status code should be 200', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response header Content-Type should be application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test('response body should be an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body object should have correct property and value', () => {\r",
									"    const responsJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responsJson).to.haveOwnProperty('error');\r",
									"    pm.expect(responsJson).to.haveOwnProperty('message');\r",
									"    pm.expect(responsJson).to.haveOwnProperty('user');\r",
									"\r",
									"    pm.expect(responsJson.error).to.be.false;\r",
									"    pm.expect(responsJson.user).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body user object should have a id user', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    const { user } = responseJson;\r",
									"\r",
									"    pm.expect(user).to.haveOwnProperty('_id');\r",
									"\r",
									"});\r",
									"\r",
									"pm.test('response body should be have token', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson).to.haveOwnProperty('token')\r",
									"\r",
									"    pm.environment.set('authToken', responseJson.token)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJSUzI1NiIsImtpZCI6IjY5N2Q3ZmI1ZGNkZThjZDA0OGQzYzkxNThiNjIwYjY5MTA1MjJiNGQiLCJ0eXAiOiJKV1QifQ.eyJpc3MiOiJodHRwczovL3NlY3VyZXRva2VuLmdvb2dsZS5jb20vc21hcnQtaG9tZS0yYWFjMyIsImF1ZCI6InNtYXJ0LWhvbWUtMmFhYzMiLCJhdXRoX3RpbWUiOjE2NTI3MTQ4MTUsInVzZXJfaWQiOiJJUnR6dlZQVlhWYTYwZms3YzBlQXpBSXhxcnYyIiwic3ViIjoiSVJ0enZWUFZYVmE2MGZrN2MwZUF6QUl4cXJ2MiIsImlhdCI6MTY1MjcxNDgxNSwiZXhwIjoxNjUyNzE4NDE1LCJlbWFpbCI6ImNvbnRvaEBnbWFpbC5jb20iLCJlbWFpbF92ZXJpZmllZCI6ZmFsc2UsImZpcmViYXNlIjp7ImlkZW50aXRpZXMiOnsiZW1haWwiOlsiY29udG9oQGdtYWlsLmNvbSJdfSwic2lnbl9pbl9wcm92aWRlciI6InBhc3N3b3JkIn19.UPCYOxGjkGi_VVJZWVqDNnHcOg4nXZ84mUYPOMKYm7J2-oHb9BdFfiotTr3kJKqNUskC-3lfkZJlL34xSWwBVOl8XXG9uoTWZPoQdQqaQiTsAz6SMJfhNegZWKrtipnDzErN8nWvzMPNJjVKIwZTdWdB4WlIpQqf-9J1w8okQqOlUUMZARZHvwEfvPI8sw6mh9NugppNvicto7KMM05oWoob5Sk6oBIEQLHSX2EnY3iks6iOtbOgQ36YXv4Ag1zkLlbA2MAD9ZzTHbJljO1Ir89ezgwpERMfCV0E8ehSz8m362M1UqHvopagJojZogjjVC0ivW54Qk_ItLo2be0T5A",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{email}}\",\r\n    \"password\": \"example$123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/login",
							"host": [
								"{{host}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('status code should be 200', () => {\r",
									"    pm.response.to.have.status(200)\r",
									"});\r",
									"\r",
									"pm.test('response header Content-Type should be application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test('response body should be an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body object should have corret property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson).to.haveOwnProperty('message');\r",
									"    pm.expect(responseJson).to.haveOwnProperty('error');\r",
									"\r",
									"    pm.expect(responseJson.message).to.equals('Logout successfully');\r",
									"    pm.expect(responseJson.error).to.be.false;\r",
									"\r",
									"    pm.environment.set('authToken', '');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/logout",
							"host": [
								"{{host}}"
							],
							"path": [
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout All Device",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('status code should be 200', () => {\r",
									"    pm.response.to.have.status(200)\r",
									"});\r",
									"\r",
									"pm.test('response header Content-Type should be application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test('response body should be an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body object should have corret property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson).to.haveOwnProperty('message');\r",
									"    pm.expect(responseJson).to.haveOwnProperty('error');\r",
									"\r",
									"    pm.expect(responseJson.message).to.equals('Logout all successfully');\r",
									"    pm.expect(responseJson.error).to.be.false;\r",
									"\r",
									"    pm.environment.set('authToken', '');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/logoutall",
							"host": [
								"{{host}}"
							],
							"path": [
								"logoutall"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "User",
			"item": [
				{
					"name": "Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('status code should be 200', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response header Content-Type should be application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test('response body should be an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body object should have correct property and value', () => {\r",
									"    const responsJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responsJson).to.haveOwnProperty('error');\r",
									"    pm.expect(responsJson).to.haveOwnProperty('message');\r",
									"    pm.expect(responsJson).to.haveOwnProperty('data');\r",
									"\r",
									"    pm.expect(responsJson.error).to.be.false;\r",
									"    pm.expect(responsJson.data).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body data object should have a id user', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    const { data } = responseJson;\r",
									"\r",
									"    pm.expect(data).to.haveOwnProperty('_id');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/user",
							"host": [
								"{{host}}"
							],
							"path": [
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('status code should be 200', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response header Content-Type should be application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test('response body should be an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body object should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson).to.haveOwnProperty('error');\r",
									"    pm.expect(responseJson).to.haveOwnProperty('message');\r",
									"    pm.expect(responseJson).to.haveOwnProperty('user');\r",
									"\r",
									"    pm.expect(responseJson.error).to.be.false;\r",
									"    pm.expect(responseJson.user).to.be.an('object');\r",
									"    pm.expect(responseJson.message).to.equals('User updated successfully');\r",
									"});\r",
									"\r",
									"pm.test('response body user object should have a id user', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    const { user } = responseJson;\r",
									"\r",
									"    pm.expect(user).to.haveOwnProperty('_id');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"lastName\" : \"Example update\",\r\n    \"firstName\" : \"Update Example\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/user",
							"host": [
								"{{host}}"
							],
							"path": [
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('status code should be 200', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response header Content-Type should be application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test('response body should be an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body object should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson).to.haveOwnProperty('error');\r",
									"    pm.expect(responseJson).to.haveOwnProperty('message');\r",
									"\r",
									"    pm.expect(responseJson.error).to.be.false;\r",
									"    pm.expect(responseJson.message).to.equals('Password updated successfully');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"password\": \"example$123\",\r\n    \"newPassword\": \"example$123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/user/password",
							"host": [
								"{{host}}"
							],
							"path": [
								"user",
								"password"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('status code should be 200', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response header Content-Type should be application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test('response body should be an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body object should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson).to.haveOwnProperty('error');\r",
									"    pm.expect(responseJson).to.haveOwnProperty('message');\r",
									"\r",
									"    pm.expect(responseJson.error).to.be.false;\r",
									"    pm.expect(responseJson.message).to.equals('User deleted successfully');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/user",
							"host": [
								"{{host}}"
							],
							"path": [
								"user"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Task",
			"item": [
				{
					"name": "Add Task",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('status code should be 201', () => {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test('response header Content-Type should be application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test('response body should be an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body object should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson).to.haveOwnProperty('error');\r",
									"    pm.expect(responseJson).to.haveOwnProperty('message');\r",
									"    pm.expect(responseJson).to.haveOwnProperty('data');\r",
									"\r",
									"    pm.expect(responseJson.error).to.be.false;\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"    pm.expect(responseJson.message).to.equals('Task created successfully');\r",
									"});\r",
									"\r",
									"pm.test('response body task object should have a id task', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    const { data } = responseJson;\r",
									"\r",
									"    pm.expect(data).to.haveOwnProperty('_id');\r",
									"    pm.environment.set('newTask', data._id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const millis = new Date(pm.request.body.deadline).getTime();\r",
									"\r",
									"pm.environment.set('deadline', new Date('2022-08-17').getTime());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"Task A\",\r\n    \"urgency\": 5,\r\n    \"completed\": false,\r\n    \"important\": true,\r\n    \"description\": \"The description of task\",\r\n    \"deadline\": {{deadline}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/task",
							"host": [
								"{{host}}"
							],
							"path": [
								"task"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Tasks",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('status code should be 200', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response header Content-Type should be application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test('response body should be an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body object should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson).to.haveOwnProperty('error');\r",
									"    pm.expect(responseJson).to.haveOwnProperty('message');\r",
									"    pm.expect(responseJson).to.haveOwnProperty('data');\r",
									"\r",
									"    pm.expect(responseJson.error).to.be.false;\r",
									"    pm.expect(responseJson.data).to.be.an('array');\r",
									"    pm.expect(responseJson.message).to.equals('Get tasks successfully');\r",
									"});\r",
									"\r",
									"pm.test('response body task object should have a id task', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    const { data } = responseJson;\r",
									"\r",
									"    pm.expect(data[0]).to.haveOwnProperty('_id');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/task",
							"host": [
								"{{host}}"
							],
							"path": [
								"task"
							],
							"query": [
								{
									"key": "priority",
									"value": "low",
									"description": "low or high",
									"disabled": true
								},
								{
									"key": "completed",
									"value": "",
									"description": "true or false",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Detail Task",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('status code should be 200', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response header Content-Type should be application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test('response body should be an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body object should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson).to.haveOwnProperty('error');\r",
									"    pm.expect(responseJson).to.haveOwnProperty('message');\r",
									"    pm.expect(responseJson).to.haveOwnProperty('data');\r",
									"\r",
									"    pm.expect(responseJson.error).to.be.false;\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"    pm.expect(responseJson.message).to.equals('Get task successfully');\r",
									"});\r",
									"\r",
									"pm.test('response body task object should have a id task', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    const { data } = responseJson;\r",
									"\r",
									"    pm.expect(data).to.haveOwnProperty('_id');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/task/{{newTask}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"task",
								"{{newTask}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Task",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('status code should be 200', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response header Content-Type should be application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test('response body should be an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body object should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson).to.haveOwnProperty('error');\r",
									"    pm.expect(responseJson).to.haveOwnProperty('message');\r",
									"\r",
									"    pm.expect(responseJson.error).to.be.false;\r",
									"    pm.expect(responseJson.message).to.equals('Task updated successfully');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\" : \"Update Task\",\r\n    \"description\"  : \"Tugas Backend Capstone\",\r\n    \"completed\" : true,\r\n    \"important\": false,\r\n    \"urgency\": 4,\r\n    \"deadline\": {{deadline}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/task/{{newTask}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"task",
								"{{newTask}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Task",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('status code should be 200', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response header Content-Type should be application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test('response body should be an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body object should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson).to.haveOwnProperty('error');\r",
									"    pm.expect(responseJson).to.haveOwnProperty('message');\r",
									"\r",
									"    pm.expect(responseJson.error).to.be.false;\r",
									"    pm.expect(responseJson.message).to.equals('Task deleted successfully');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/task/{{newTask}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"task",
								"{{newTask}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete All Task",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('status code should be 200', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response header Content-Type should be application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test('response body should be an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body object should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson).to.haveOwnProperty('error');\r",
									"    pm.expect(responseJson).to.haveOwnProperty('message');\r",
									"\r",
									"    pm.expect(responseJson.error).to.be.false;\r",
									"    pm.expect(responseJson.message).to.equals('Tasks deleted successfully');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/task",
							"host": [
								"{{host}}"
							],
							"path": [
								"task"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get E.Matrix",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('status code should be 200', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response header Content-Type should be application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test('response body should be an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body object should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson).to.haveOwnProperty('error');\r",
									"    pm.expect(responseJson).to.haveOwnProperty('message');\r",
									"    pm.expect(responseJson).to.haveOwnProperty('data');\r",
									"\r",
									"    pm.expect(responseJson.error).to.be.false;\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"    pm.expect(responseJson.message).to.equals('Get matrix successfully');\r",
									"});\r",
									"\r",
									"pm.test('response body data should have correct property and value array', () => {\r",
									"    const { data } = pm.response.json();\r",
									"\r",
									"    pm.expect(data).to.haveOwnProperty('do');\r",
									"    pm.expect(data).to.haveOwnProperty('decide');\r",
									"    pm.expect(data).to.haveOwnProperty('delegate');\r",
									"    pm.expect(data).to.haveOwnProperty('delete');\r",
									"\r",
									"    pm.expect(data.do).to.be.an('array');\r",
									"    pm.expect(data.decide).to.be.an('array');\r",
									"    pm.expect(data.delegate).to.be.an('array');\r",
									"    pm.expect(data.delete).to.be.an('array');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/matrix",
							"host": [
								"{{host}}"
							],
							"path": [
								"matrix"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "History",
			"item": [
				{
					"name": "Add History",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set('finished', Date.now())"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('status code should be 201', () => {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test('response header Content-Type should be application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test('response body should be an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body object should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson).to.haveOwnProperty('error');\r",
									"    pm.expect(responseJson).to.haveOwnProperty('message');\r",
									"    pm.expect(responseJson).to.haveOwnProperty('data');\r",
									"\r",
									"    pm.expect(responseJson.error).to.be.false;\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"    pm.expect(responseJson.message).to.equals('History created successfully');\r",
									"});\r",
									"\r",
									"pm.test('response body task object should have a id task', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    const { data } = responseJson;\r",
									"\r",
									"    pm.expect(data).to.haveOwnProperty('_id');\r",
									"    pm.environment.set('newTask', data._id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"task\" : \"{{newTask}}\",\r\n    \"start_date\": 1655748826345,\r\n    \"end_date\": {{finished}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/history",
							"host": [
								"{{host}}"
							],
							"path": [
								"history"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Histories",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('status code should be 200', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response header Content-Type should be application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test('response body should be an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body object should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson).to.haveOwnProperty('error');\r",
									"    pm.expect(responseJson).to.haveOwnProperty('message');\r",
									"    pm.expect(responseJson).to.haveOwnProperty('data');\r",
									"\r",
									"    pm.expect(responseJson.error).to.be.false;\r",
									"    pm.expect(responseJson.data).to.be.an('array');\r",
									"    pm.expect(responseJson.message).to.equals('Get histories successfully');\r",
									"});\r",
									"\r",
									"pm.test('response body task object should have a id task', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    const { data } = responseJson;\r",
									"\r",
									"    pm.expect(data[0]).to.haveOwnProperty('_id');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/history",
							"host": [
								"{{host}}"
							],
							"path": [
								"history"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Subscribe",
			"item": [
				{
					"name": "Push Notification",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('status code should be 200', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response header Content-Type should be application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test('response body should be an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body object should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson).to.haveOwnProperty('error');\r",
									"    pm.expect(responseJson).to.haveOwnProperty('message');\r",
									"\r",
									"    pm.expect(responseJson.error).to.be.false;\r",
									"    pm.expect(responseJson.message).to.equals('Push notification successfully to 1 subscribers');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"subscribe\": \"Budi\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/push-notification?key={{keypush}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"push-notification"
							],
							"query": [
								{
									"key": "key",
									"value": "{{keypush}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Subscribe Notification",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('status code should be 200', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response header Content-Type should be application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test('response body should be an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body object should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson).to.haveOwnProperty('error');\r",
									"    pm.expect(responseJson).to.haveOwnProperty('message');\r",
									"\r",
									"    pm.expect(responseJson.error).to.be.false;\r",
									"    pm.expect(responseJson.message).to.equals('Subscribe successfully');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"endpoint\": \"https://fcm.googleapis.com/fcm/send/fg6ejTcGb4c:APA91bG8VQuDIC6Ejsr5v6b8VFc2iyNY-nvFEJMtHgDuCk4PtkyHKrxACCnkNkl5HuqNqo5AL48WtwgnLakjnDAeD_0ChyyjnrfB9sXX1ebbwRRN5-KI8QX-KCcXwE6OBMU4B5VLkk8b\",\r\n    \"keys\": {\r\n        \"auth\": \"PPKjEhZxqYs20R4liObaYtQ\",\r\n        \"p256dh\": \"BJ9hgbyFXgiaDPEzV_ZyX3l-vIfCBMp1V2CFM8HcAKpvRfvR1cSaSC1V-TPoRiS19rUSxGqoqyDy5kkl4heaGJE\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/save-subscribe",
							"host": [
								"{{host}}"
							],
							"path": [
								"save-subscribe"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{authToken}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}